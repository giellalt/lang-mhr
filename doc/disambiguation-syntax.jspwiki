
This is the Eastern Mari disambiguation file. It chooses
the correct morphological analyses in any given sentence context.

The file first defines sentence delimiters and tags and sets.
Thereafter come the rules, each rule is listed below.


 !!!Sentence delimiters

The delimiters are: "<.>" "<!>" "<?>" "<...>" "<¶>" sent



The __Tags__ section lists all the tags inherited from the fst, and defines them for
use in the syntactic analysis.
The tags are documented in the root.lexc file, and here only listed for reference.

The next section, __Sets__, contains sets defined
on the basis of the tags listed here, those set names are not visible in the output.





!!Tags



!Beginning and end of sentence

BOS
EOS


!Parts of speech tags

N
V
A
Adv
CC
CS
Interj
Pron
Num
Pcle
Clt
Po

WORD is the set of all POS

!Verbal tense and mood tags
Prs
Prt1
Prt2
Fut
Imprt
Ind
Cond
Des

!Other verbal tags
Act
ConNeg
FutPrc
Ger
Inf
Nec
Neg
NegPrc
Pass
Prc
PrfPrc

Verbal person-number tags
Sg1
Sg2
Sg3
Pl1
Pl2
Pl3


!Numeral tags

Sg
Pl

!Case tags

Nom
Gen
Abl
Dat
Com
Cns
Acc
Ins
Ine
Ill
Cmpr (case)

!Other nominal tags

Pers
Refl
Rel
Interr
Recipr
Dem
ABBR

!Adjective comparison tags

Pos (?)
Superl
Comp

!Possessive suffix tags

PxSg1
PxSg2
PxSg3
PxPl1
PxPl2
PxPl3

!Numeral tags

Card
Coll
Ord
Temp (?)

!Punctuation marks

CLB
PUCT
LEFT
RIGHT
COMMA

!Derivation tags
Der/MWN
Der/sa

!Particles
Qst
Foc


!Tags for internal testing
CmpTest
Err

!!Sets

* __CASE__ = all cases
* __OBLCASE__ = All cases except Nom
* __VFIN__ = All moods

!!!Rule section






!!Early, word-internal rules

* __CmpTst__ remove CmpTst if not 1 N
* __CmpTst2__ Select CmpTst in all other cases


!CC or Pcle
* __teveteve1__ gives CC if two теве
* __teveteve1__ gives CC if two теве
* __onlyteve__ gives Pcle if two теве

* __PcleNotCC__ Lauseen alussa on Pcle



!Derivations

* __RemDerMWN__ if noun follows
* __Dersa__ if noun follows
* __SelDerMWN__ select Der/MWN if no noun follows

Adjectives

* __AdjNotN__ if N or A to the right

* __AdjNotAdv__ if N to the right

* __AdjNotPron__ if N to the right

!Cases

* __AccNeedsVerb__ prefers Nom (TODO: does this make sense?)

!Numerals

* __IkNumN__ ik is num before N Sg
* __IkNumAN__ ik is num before A N Sg

* __KumNumAN__ ik is num before A N Sg

!Pronouns
* __NotInterr__ if Rel

* __Dem__ if noun follows

* __уке__

!Postpositions



* __PoNeedsGen__ removes postposition if the word to the left is not Gen



!!Adverbs


* __molan__ awaiting rules for dative verbs subcategorising for mo Dat


!!Verbs

!Finite verb or Gerundium

* __FinNotGer__ removes Ger if there is a Ind Prt2 Sg3 in the clause

* __GerNotFin__  Ger if there is a Ind next


* __GerNotFin__  Ger if there is a Ger da Ger VFin

!First or third person

* __Sg1NotSg3__ removes Prt1 Sg3 when Pers Sg1 Nom in same clause

* __Sg3NotSg1__ removes Prt1 Sg1 when there is no Pers Sg1 Nom in same clause
** This definitely is too strong, it precludes zero Sg1 subjects


!ConNeg or not
* __NoConNeg1__ No ConNeg if no Neg to the left
* __NoConNeg2__ No ConNeg if another ConNeg to the left


!Imperative or noun

* __NotImpWhenInd__
* __NotImpWhenWords1__
* __NotImpWhenWords2__

!Some more verb rules
*__NotANoun__

!да

* __da1__ Adv initially

* __da2__ CC elsewhere

!и
* __iNotAbbr__

!Interjection

* __NoExclNoInterj__




__AifVövny__ selects A if вӧвны somewhere to the left






