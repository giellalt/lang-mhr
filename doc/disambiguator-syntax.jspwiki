



This is the Eastern Mari disambiguation file. It chooses
the correct morphological analyses in any given sentence context.

The file first defines sentence delimiters and tags and sets.
Thereafter come the rules, each rule is listed below.


 !!!Sentence delimiters

The delimiters are: "<.>" "<!>" "<?>" "<...>" "<¶>" sent




The __Tags__ section lists all the tags inherited from the fst, and defines them for
use in the syntactic analysis.
The tags are documented in the root.lexc file, and here only listed for reference.

The next section, __Sets__, contains sets defined
on the basis of the tags listed here, those set names are not visible in the output.





!!Tags



!Beginning and end of sentence

BOS
EOS

!Clause boundary


!Parts of speech tags

N
V
A
Adv
CC
CS
Interj
Pron
Num
Pcle
Clt
Po

WORD is the set of all POS

!Verbal tense and mood tags
Prs
Prt1
Prt2
Fut
Imprt
Ind
Cond
Des

!Other verbal tags
Act
ConNeg
FutPrc
Ger
Inf
Nec
Neg
NegPrc
Pass
Prc
PrfPrc

Verbal person-number tags
Sg1
Sg2
Sg3
Pl1
Pl2
Pl3

!Numeral tags

Sg
Pl

!Case tags

Nom
Gen
Abl
Dat
Com
Cns
Acc
Ins
Ine
Ill
Cmpr (case)



!Other nominal tags

Pers
Refl
Rel
Interr
Recipr
Dem
ABBR

!Adjective comparison tags

Pos (?)
Superl
Comp

!Possessive suffix tags

PxSg1
PxSg2
PxSg3
PxPl1
PxPl2
PxPl3

!Numeral tags

Card
Coll
Ord
Temp (?)


!Particles
Qst
Foc


!Punctuation marks

CLB
PUCT
LEFT
RIGHT
COMMA

!Derivation tags
Der/MWN
Der/sa
Der/Pur
Der/Caus
Der/Nom

!Tags for internal testing
CmpTest
Err


!!Sets

* __CASE__ = all cases
* __OBLCASE__ = All cases except Nom
* __VFIN__ = All moods









Der/Date
Der/Year
Der/Hum
Der/Lang
Der/Domain
Der/Feat-phys
Der/Clth
Der/Body
Der/Act

Sem/Ani
Sem/Fem
Sem/Group
Sem/Mal
Sem/Measr
Sem/Money
Sem/Obj
Sem/Obj-el
Sem/Org
Sem/Perc-emo
Sem/Plc
Sem/Sign
Sem/State-sick
Sem/Sur
Sem/Time
Sem/Txt




!!!Rule section


!!Early, word-internal rules

* __CmpTst__ remove CmpTst if not 1 N
* __CmpTst2__ Select CmpTst in all other cases
*__NoFocPossNoun__ remove Foc/Poss if PxSg3

!CC or Pcle
* __teveteve1__ gives CC if two теве
* __teveteve1__ gives CC if two теве
* __onlyteve__ gives Pcle if two теве

* __PcleNotCC__ Lauseen alussa on Pcle

* __CCnotInterj__

* __Posna__ деч посна

* __ikNum__ ик is never A

!Particles

*__InterrQ__ if question mark anywhere to the right

*__Interr__ removes Rel if question mark to the right somewhere

!Verbs

Existential ulo


Infinitives



* __Ind__ selects Ind if no Ind to the right or to the left

* __1SgAgr__ selects (Ind Sg1) if Pron1Sg to the right or to the left

* __1SgAgr__ selects (Ind Sg1) if (Pron1Sg Nom) to the right or to the left

* __2SgAgr__ selects (Ind Sg2) if Pron2Sg to the right or to the left

* __IndAfterInf__ selects Ind if Inf to the left

* __NotImpWhenInd__

* __NotImpWhenWords1__

* __NotImpWhenWords2__



!Adjectives




*__RemAdjBeforeProp__ removes A if Prop to the left

*__AdjBeforeMo__ selects A if Interr to the right

* __AdjBeforeAN__ selects A if N or A to the right

* __RemN__ removes N if N to the right

* __AdjAfterNbeforeEOS__ selects A if N to the left and EOS to the right (predicative position)

*_AdjBeforeConjAdj_ selects A if conjuction and A to the right ;

* __AdjNotAdv__ removes Adv if N to the right

* __AdjNotPron__ removes Pron Pers if N to the right

*__AdjNotN__ removes N if Pron Pers anywhere to the left

* __RemAdj1__ removes A if no N or A follows

*__RemAdj2__ removes A if no N or Pron in a clause



!Nouns

* __lym__ nalash "to take a name" = "to be given a title"


*__RemNomIfPronLeft__ removes Nom if Pron Nom anywhere to the left

*__RemNomIfPronRight__ removes Nom if Pron Nom anywhere to the right

*__NomBeforeConjNom__ selects N Nom if conjoined with N Nom

*__NafterDem__ selects N if Dem to the left (demonstratives tend to be sole modifiers) 

*__NotANoun__

*__NafterAbeforeEOS__

*__RemNafterAdv__ removes N if adverb to the left

!Derivations


* __RemDerMWN1__ removes Der/MWN if N is an option

* __RemDerMWN2__ removes Der/MWN if N to the right

* __Dersa__ if noun follows

* __SelDerMWN__ select Der/MWN if no noun follows

!Cases

* __RemNomNif12left__ removes Nom with N if there is a verb with 1st or 2nd agreement to the lef

* __RemNomNif12right__ removes Nom with N if there is a verb with 1st or 2nd agreement to the right


* __AccNeedsVerb__ prefers Nom (TODO: does this make sense? SASHA: it does but there was a typo, -1* instead of 1* in the third clause of the condition)


!Numerals

* __IkNumN__ ik is num before N Sg
* __IkNumAN__ ik is num before A N Sg

* __KumNumAN__ ik is num before A N Sg

!Pronouns
* __NotImp__ in most тиде cases

* __NotInterr__ if Rel

* __Dem__ if noun follows

* __уке__

!Conjunctions



!Postpositions





* __PoNeedsGen__ removes postposition if the word to the left is not Gen or Nom


!!Adverbs






* __molan__ awaiting rules for dative verbs subcategorising for mo Dat







!!Verbs

!Finite verb or Gerundium

*__RemGer__ removes Ger Gen if there is no verb to the right 

* __FinNotGer__ removes Ger if there is a Ind Prt2 Sg3 in the clause

* __GerNotFin__  Ger if there is a Ind next

* __GerNotFin__  Ger if there is a Ger da Ger VFin






!First or third person

* __Sg1NotSg3__ removes Prt1 Sg3 when Pers Sg1 Nom in same clause

* __Sg3NotSg1__ removes Prt1 Sg1 when there is no Pers Sg1 Nom in same clause
** This definitely is too strong, it precludes zero Sg1 subjects

!ConNeg or not
* __NoConNeg1__ No ConNeg if no Neg to the left
* __NoConNeg2__ No ConNeg if another ConNeg to the left

!да

* __da1__ Adv initially

* __da2__ CC elsewhere

!и
* __iNotAbbr__

!Interjection

* __NoExclNoInterj__

!Predicative

__AifVövny__ selects A if вӧвны somewhere to the left




