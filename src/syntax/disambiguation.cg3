
#!! This is the Eastern Mari disambiguation file. It chooses
#!! the correct morphological analyses in any given sentence context.

#!! The file first defines sentence delimiters and tags and sets.
#!! Thereafter come the rules, each rule is listed below.


# ================ #
#!!  !!!Sentence delimiters 
# ================ #

DELIMITERS = "<.>" "<!>" "<?>" "<...>" "<¶>" sent ;
#!! The delimiters are: "<.>" "<!>" "<?>" "<...>" "<¶>" sent 

#PARENTHESES = "<$(>" "<$)>" "<$[>" "<$]>" "<${>" "<$}>" "<$«>" "<$»>" ;

# ============= #
# !!!Tags and sets 
# ============= #

#!! The __Tags__ section lists all the tags inherited from the fst, and defines them for
#!! use in the syntactic analysis. 
#!! The tags are documented in the root.lexc file, and here only listed for reference.

#!! The next section, __Sets__, contains sets defined
#!! on the basis of the tags listed here, those set names are not visible in the output.

LIST DAT-V = "куанаш" ;

LIST DAT-PO = "верч" "кӧра" ;

LIST DAT-A = "поян" "тале" "пайдале" ;

SETS

#!! !!Tags



#!! !Beginning and end of sentence

LIST BOS = (>>>) (<s>); #!! BOS
LIST EOS = (<<<) (</s>); #!! EOS

# We define end of clause and beginning of clause in a way so that the file
# may be read both by the CG-2 and the vislcg formalisms.

#!! !Parts of speech tags

LIST N = N ;                    #!! N
LIST V = V ;                    #!! V
LIST A = A ;                    #!! A
LIST Adv = Adv ; 				#!! Adv
LIST CC = CC ; 					#!! CC
LIST CS = CS ; 					#!! CS
LIST Interj = Interj interj ij; #!! Interj
LIST Pron = Pron ; 				#!! Pron
LIST Num = Num ; 				#!! Num
LIST Pcle = Pcle ; 				#!! Pcle
LIST Clt = Clt ; 				#!! Clt
LIST Po = Po ; 					#!! Po

#!! WORD is the set of all POS
LIST WORD = N V A Adv CC CS Interj Pron Num Pcle Clt Po ;

#!! !Verbal tense and mood tags
LIST Prs = Prs ; 		 #!! Prs
LIST Prt1 = Prt1 ; 		 #!! Prt1
LIST Prt2 = Prt2 ; 		 #!! Prt2
LIST Fut = Fut ; 		 #!! Fut
LIST Imprt = Imprt ; 		 #!! Imprt
LIST Ind = Ind ind ; 		 #!! Ind
LIST Cond = Cond cond ; 	 #!! Cond
LIST Des = Des des ;		 #!! Des

#!! !Other verbal tags
LIST Act = Act ; 			 #!! Act
LIST ConNeg = ConNeg conneg; #!! ConNeg
LIST FutPrc = FutPrc ; 			 #!! FutPrc
LIST Ger = Ger ger ;		 #!! Ger
LIST Inf = Inf ; 			 #!! Inf
LIST Nec = Nec nec ;         #!! Nec
LIST Neg = Neg neg ; 		 #!! Neg
LIST NegPrc = NegPrc ; 			 #!! NegPrc
LIST Pass = Pass ; 			 #!! Pass
LIST Prc = Prc ; 			 #!! Prc
LIST PrfPrc = PrfPrc ; 			 #!! PrfPrc

#!! Verbal person-number tags
LIST Sg1 = Sg1 ; 			 #!! Sg1
LIST Sg2 = Sg2 ; 			 #!! Sg2
LIST Sg3 = Sg3 ; 			 #!! Sg3
LIST Pl1 = Pl1 ; 			 #!! Pl1
LIST Pl2 = Pl2 ; 			 #!! Pl2
LIST Pl3 = Pl3 ; 			 #!! Pl3


#!! !Numeral tags

LIST Sg = Sg sg ; 	  #!! Sg
LIST Pl = Pl pl ; 	  #!! Pl

#!! !Case tags

LIST Nom = Nom nom ;  #!! Nom
LIST Gen = Gen gen ;  #!! Gen
LIST Abl = Abl abl ;  #!! Abl
LIST Dat = Dat dat ;  #!! Dat
LIST Com = Com com ;  #!! Com
LIST Cns = Cns cns ;  #!! Cns
LIST Acc = Acc acc ;   #!! Acc
LIST Ins = Ins ins ;   #!! Ins
LIST Ine = Ine ine ;   #!! Ine
LIST Ill = Ill ill ;   #!! Ill
LIST Cmpr = Cmpr ; 	   #!! Cmpr (case)
		
#!! !Other nominal tags
					   
LIST Pers = Pers ;	   #!! Pers 
LIST Refl = Refl ; 	   #!! Refl
LIST Rel = Rel ; 	   #!! Rel
LIST Interr = Interr ; #!! Interr
LIST Recipr = Recipr ; #!! Recipr
LIST Dem = Dem ;	#!! Dem
LIST ABBR = ABBR ;	  #!! ABBR

#!! !Adjective comparison tags

LIST Pos = Pos ; 	 #!! Pos (?)
LIST Superl = Superl ; #!! Superl
LIST Comp = Comp ; 	   #!! Comp

#!! !Possessive suffix tags

LIST PxSg1 = PxSg1 ; #!! PxSg1 
LIST PxSg2 = PxSg2 ; #!! PxSg2 
LIST PxSg3 = PxSg3 ; #!! PxSg3 
LIST PxPl1 = PxPl1 ; #!! PxPl1 
LIST PxPl2 = PxPl2 ; #!! PxPl2 
LIST PxPl3 = PxPl3 ; #!! PxPl3 

#!! !Mumeral tags

LIST Card = Card ; #!! Card
LIST Coll = Coll ;  #!! Coll
LIST Ord = Ord ;  #!! Ord
LIST Temp = Temp ;  #!! Temp (?)

#!! !Punctuation marks

LIST CLB = CLB ; 	  #!! CLB
LIST PUNCT = PUNCT ;  #!! PUCT
LIST LEFT = LEFT ; 	  #!! LEFT
LIST RIGHT = RIGHT ;  #!! RIGHT
LIST COMMA = "," ;	  #!! COMMA

#!! !Derivation tags
LIST Der/MWN = Der/MWN ; #!! Der/MWN
LIST Der/са = Der/са ;	 #!! Der/sa

#!! !Particles
LIST Qst = Qst ; #!! Qst
LIST Foc = Foc ; #!! Foc


#!! !Tags for internal testing
LIST CmpTest = CmpTest ; #!! CmpTest
LIST Err = Err ; #!! Err

LIST @ADVL> = @ADVL> ;
LIST @>P = @>P ;
LIST @>N = @>N ;
LIST @OBJ> = @OBJ> ;
LIST @SUBJ> = SUBJ> ;
LIST @+FMAINV = @+FMAINV ;
#!! !!Sets

LIST CASE = Nom Gen Abl Dat Com Cns Acc Ins Ine Ill Cmpr ; #!! * __CASE__ = all cases
SET OBLCASE = CASE - Nom ; #!! * __OBLCASE__ = All cases except Nom
SET VFIN = Ind | Cond | Des | Imprt ; #!! * __VFIN__ = All moods

#!! !!!Rule section

SECTION





#!! !!Early, word-internal rules

#!! * __CmpTst__ remove CmpTst if not 1 N
REMOVE:CmpTst CmpTest IF (NOT 1 N);
#!! * __CmpTst2__ Select CmpTst in all other cases
SELECT:CmpTst2 CmpTest ; # Kill'em all


#!! !CC or Pcle
#!! * __teveteve1__ gives CC if two теве
SELECT:teveteve1 CC IF (0   ("теве"))(*1 ("теве"));
#!! * __teveteve1__ gives CC if two теве
SELECT:teveteve2 CC IF (*-1 ("теве"))(0  ("теве"));
#!! * __onlyteve__ gives Pcle if two теве
REMOVE:onlyteve  CC IF (0 ("теве"));

#!! * __PcleNotCC__ Lauseen alussa on Pcle
REMOVE:PcleNotCC CC IF (-1 BOS)(0 Pcle);




#!! !Derivations

#!! * __RemDerMWN__ if noun follows
REMOVE:RemDerMWN (Der/MWN N Nom) IF (1 N);	
#!! * __Dersa__ if noun follows
REMOVE:Dersa Der/са IF (0 ("<(.*)са>"r) + A);
#!! * __SelDerMWN__ select Der/MWN if no noun follows
SELECT:SelDerMWN (Der/MWN) IF (0 A)(*1 EOS BARRIER N);
	
#!! Adjectives

#!! * __AdjNotN__ if N or A to the right
REMOVE:AdjNotN N IF (0 A)(1 A OR N);

#!! * __AdjNotAdv__ if N to the right
REMOVE:AdjNotAdv Adv IF (0 A)(1 A OR N);

#!! * __AdjNotPron__ if N to the right
REMOVE:AdjNotPron Pron IF (0 A)(1 N);

#!! !Cases

#!! * __AccNeedsVerb__ prefers Nom (TODO: does this make sense?)
REMOVE:AccNeedsVerb Acc IF (0C Nom OR Acc) (NOT -1* VFIN BARRIER BOS) (NOT -1* VFIN BARRIER EOS);

#!! !Numerals

#!! * __IkNumN__ ik is num before N Sg
REMOVE:IkNumN (Pron) IF (0 ("ик"))(1 N + Sg); 
#!! * __IkNumAN__ ik is num before A N Sg
REMOVE:IkNumAN (Pron) IF (0 ("ик"))(1 A)(2 N + Sg); 

#!! * __KumNumAN__ ik is num before A N Sg
REMOVE:KumNumAN N IF (0 ("кум"))(1 A OR N);

#!! !Pronouns
#!! * __NotInterr__ if Rel
REMOVE:NotInterr Interr IF (-2 N)(-1 (","))(0 Rel);
REMOVE:Interr Rel IF (0 Interr)(*1 ("?"));

#!! * __Dem__ if noun follows
SELECT:Dem Dem IF (0 Dem)(1 N + Nom);

#!! * __уке__
SELECT:AdvUke Adv IF (0 ("уке"))(1 CLB OR EOS OR ("гын"));

#!! !Postpositions

#!! * __PoNeedsGen__ removes postposition if the word to the left is not Gen
REMOVE:PoNeedsGen Po IF (NOT -1 Gen);

#!! !!Adverbs

SELECT:modat ("мо") IF (0 ("молан"))(*0 DAT-V OR DAT-PO OR DAT-A BARRIER CLB) ;

#!! * __molan__ awaiting rules for dative verbs subcategorising for mo Dat
REMOVE:molan ("мо") IF (0 ("молан")) ;
#SELECT:molan ("мо") IF (0 ("молан")) ;


#!! !!Verbs
#     =====

#!! !Finite verb or Gerundium

#!! * __FinNotGer__ removes Ger if there is a Ind Prt2 Sg3 in the clause
REMOVE:FinNotGer Ger IF (0 Ind + Prt2 + Sg3)(NOT *0 VFIN);

#!! * __GerNotFin__  Ger if there is a Ind next
SELECT:GerNotFin Ger IF (1 Ind) ;


#!! * __GerNotFin__  Ger if there is a Ger da Ger VFin
SELECT:GerNotFin2 Ger IF (1 CC)(2C Ger) ;

#!! !First or third person

#!! * __Sg1NotSg3__ removes Prt1 Sg3 when Pers Sg1 Nom in same clause
REMOVE:Sg1NotSg3 (Prt1 Sg3) IF (*-1 (Pers Sg1 Nom) BARRIER N + Nom OR Pers + Sg3 + Nom)(0 (V Prt1 Sg1));

#!! * __Sg3NotSg1__ removes Prt1 Sg1 when there is no Pers Sg1 Nom in same clause
#REMOVE:Sg3NotSg1 (Prt1 Sg1) IF (NOT *0 (Pers Sg1 Nom)) ;
#!! ** This definitely is too strong, it precludes zero Sg1 subjects

SELECT Neg IF (1 ConNeg);

#!! !ConNeg or not
#!! * __NoConNeg1__ No ConNeg if no Neg to the left
REMOVE:NoConNeg1 ConNeg IF (NOT *-1 Neg BARRIER CLB);
#!! * __NoConNeg2__ No ConNeg if another ConNeg to the left
REMOVE:NoConNeg2 ConNeg IF (-1* ConNeg BARRIER Neg);

	
#!! !Imperative or noun

#!! * __NotImpWhenInd__
REMOVE:NotImpWhenInd Imprt IF (*-1C Ind);
#!! * __NotImpWhenWords1__
REMOVE:NotImpWhenWords1 Imprt IF (-1 N)(0 N);
#!! * __NotImpWhenWords2__
REMOVE:NotImpWhenWords2 Imprt IF (-1 WORD LINK *-1 BOS BARRIER Imprt);

#!! !да

#!! * __da1__ Adv initially
SELECT:da1 Adv IF (-1 BOS)(0 ("да"))(1 EOS OR COMMA);
## Да, я знаю

#!! * __da2__ CC elsewhere
REMOVE:da2 Adv IF (0 ("да"));
## Коми да мари

#!! !и
#!! * __iNotAbbr__
REMOVE:iNotAbbr ABBR IF (0 CC)(NOT 1 ("."));

#!! !Interjection

#!! * __NoExclNoInterj__
REMOVE:NoExclNoInterj Interj IF (NOT 1* ("!") BARRIER COMMA) ;



# Predicative

#!! __AifVövny__ selects A if вӧвны somewhere to the left
SELECT:AifVövny A IF (*-1 ("вӧвны") BARRIER N);


SECTION

MAP:shkepo @>P TARGET ("шке") IF (1 Po);

MAP:shkeadvl @ADVL> TARGET ("шке") IF (NOT 0 OBLCASE)(NOT 1 N);
MAP:shkeattr @>N TARGET ("шке") IF (NOT 0 OBLCASE)(1 N);


MAP:obj @OBJ> TARGET Acc (*1 V);
MAP:subj @SUBJ> TARGET Nom (*1 V);
MAP:vfin @+FMAINV TARGET Ind ;
